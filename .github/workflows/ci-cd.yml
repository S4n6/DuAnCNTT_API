name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - name: Create .env file
        run: |
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
          echo "SECRET_HASH_PASSWORD=${{ secrets.SECRET_HASH_PASSWORD }}" >> .env
          echo "ENCODE_PASSWORD=${{ secrets.SECRET_HASH_PASSWORD }}" >> .env
          echo "HOST_AUTH_SERVICE=${{ secrets.HOST_AUTH_SERVICE }}" >> .env
          echo "USER_SERVICE_PORT=${{ secrets.USER_SERVICE_PORT }}" >> .env
          echo "GRPC_HOST_USER_SERVICE=${{ secrets.GRPC_HOST_USER_SERVICE }}" >> .env

      - name: Build Docker images
        run: |
          docker build -t sang12/manage_event:user-service -f apps/user/Dockerfile .
          docker build -t sang12/manage_event:auth-service -f apps/auth/Dockerfile .
          docker build -t sang12/manage_event:event-service -f apps/event/Dockerfile .
          docker build -t sang12/manage_event:registration-service -f apps/registration/Dockerfile .

      - name: Push Docker images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push sang12/manage_event:user-service
          docker push sang12/manage_event:auth-service
          docker push sang12/manage_event:event-service
          docker push sang12/manage_event:registration-service

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Create .env file
        run: |
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
          echo "SECRET_HASH_PASSWORD=${{ secrets.SECRET_HASH_PASSWORD }}" >> .env
          echo "ENCODE_PASSWORD=${{ secrets.SECRET_HASH_PASSWORD }}" >> .env
          echo "HOST_AUTH_SERVICE=http://auth:3000" >> .env
          echo "USER_SERVICE_PORT=${{ secrets.USER_SERVICE_PORT }}" >> .env
          echo "GRPC_HOST_USER_SERVICE=user:5001" >> .env

      - name: Create Docker network
        run: docker network create backend

      - name: Start auth service container
        run: |
          docker run -d --name auth --network backend --env-file .env sang12/manage_event:auth-service

      - name: List folders in /usr/src/app
        run: |
          docker exec user ls -l /usr/src/app

      - name: Start user service container
        run: |
          docker run -d --name user --network backend --env-file .env sang12/manage_event:user-service

      # - name: Check logs
      #   run: |
      #     docker logs auth -f
      #     docker logs user -f

      - name: Run tests for user service
        run: |
          docker exec user npx jest --config /test/jest-e2e.json

      - name: Stop and remove user service container
        run: |
          docker stop user
          docker rm user

      - name: Remove Docker network
        run: docker network rm backend

      - name: Lint the code
        run: |
          docker run --rm --env-file .env sang12/manage_event:user-service npm run lint
