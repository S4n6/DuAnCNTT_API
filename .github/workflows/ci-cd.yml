name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - name: Build Docker images
        run: |
          docker build -t user-service:latest -f apps/user/Dockerfile .
          docker build -t auth-service:latest -f apps/auth/Dockerfile .
          docker build -t event-service:latest -f apps/event/Dockerfile .
          docker build -t registration-service:latest -f apps/registration/Dockerfile .

      - name: Push Docker images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag user-service:latest sang12/manage_event:user-service-latest
          docker tag event-service:latest sang12/manage_event:event-service-latest
          docker tag auth-service:latest sang12/manage_event:auth-service-latest
          docker push sang12/manage_event:user-service-latest
          docker push sang12/manage_event:event-service-latest
          docker push sang12/manage_event:auth-service-latest

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Create .env file
        run: |
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
          echo "SECRET_HASH_PASSWORD=${{ secrets.SECRET_HASH_PASSWORD }}" >> .env
          echo "ENCODE_PASSWORD=${{ secrets.SECRET_HASH_PASSWORD }}" >> .env
          echo "HOST_AUTH_SERVICE=${{ secrets.HOST_AUTH_SERVICE }}" >> .env
          echo "USER_SERVICE_PORT=${{ secrets.USER_SERVICE_PORT }}" >> .env

      - name: Create Docker network
        run: docker network create test-network

      - name: Start auth service container
        run: |
          docker run -d --name auth-service --network --env-file .env sang12/manage_event:auth-service-latest

      - name: Run tests for user service
        run: |
          docker run --rm \
            --network test-network \
            --env-file .env \
            sang12/manage_event:user-service-latest npx jest --config ./test/jest-e2e.json

      - name: Run tests for event service
        run: |
          docker run --rm \
            --env-file .env \
            sang12/manage_event:event-service-latest npx jest --config ./test/jest-e2e.json

      - name: Lint the code
        run: |
          docker run --rm --env-file .env sang12/manage_event:user-service-latest npm run lint
          docker run --rm --env-file .env sang12/manage_event:event-service-latest npm run lint
